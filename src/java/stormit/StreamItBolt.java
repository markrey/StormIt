/**
 * Licensed to Milinda Pathirage under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package stormit;

import backtype.storm.coordination.CoordinatedBolt.FinishedCallback;
import backtype.storm.generated.StreamInfo;
import backtype.storm.task.OutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.IRichBolt;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;
import backtype.storm.utils.Utils;
import clojure.lang.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.lang.Math;

public class StreamItBolt implements IRichBolt, FinishedCallback{
    public static Logger LOG = LoggerFactory.getLogger(StreamItBolt.class);

    private Map stormConf;

    private TopologyContext context;

    private OutputCollector collector;

    private LinkedList<Tuple> tupleBuffer = new LinkedList<>();

    /* Number of tuples will get popped during single execution of this boltFilter. */
    private long popCount;

    /* Number of tuples which boltFilter will peek. We cannot execute boltFilter until we
    at least have this amount of tuples in buffer. */
    private long peekCount;

    /* Number of tuples which will be generated by boltFilter. This is irrelevant i Storm context. */
    private long pushCount;

    List<String> prepareFnSpec;

    List<Object> params;

    Map<String, StreamInfo> outputSpec;

    Map<String, StreamInfo> inputSpec;

    BoltFilter boltFilter;

    public StreamItBolt(List<String> prepareFnSpec,
                        List<Object> params,
                        Map<String, StreamInfo> outputSpec,
                        Map<String, StreamInfo> inputSpec,
                        long popCount,
                        long peekCount,
                        long pushCount){
        this.peekCount = peekCount;
        this.popCount = popCount;
        this.pushCount = pushCount;
        this.prepareFnSpec = prepareFnSpec;
        this.params = params;
        this.outputSpec = outputSpec;
        this.inputSpec = inputSpec;
    }

    @Override
    public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {
        this.stormConf = stormConf;
        this.context = context;
        this.collector = collector;

        // Prepare boltFilter from clojure
        IFn hof = Utils.loadClojureFn(prepareFnSpec.get(0), prepareFnSpec.get(1));
        try {
            IFn preparer = (IFn) hof.applyTo(RT.seq(params));

            boltFilter = (BoltFilter) preparer.applyTo(RT.seq(Collections.emptyList()));
            boltFilter.setStreamItBolt(this);
        } catch (Exception e) {
            LOG.error("Something went wrong during initialization of BoltFilter.", e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public void execute(Tuple tuple) {
        tupleBuffer.add(tuple);
        long limit = Math.max(peekCount, popCount);
        if(tupleBuffer.size() > peekCount){
            // Copy first peekCount elements from tuple buffer and invoke boltFilter.
            boltFilter.invoke(copyTuples(peekCount));
        }
    }

    @Override
    public void cleanup() {

    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
        for(String stream: outputSpec.keySet()) {
            StreamInfo info = outputSpec.get(stream);
            declarer.declareStream(stream, info.is_direct(), new Fields(info.get_output_fields()));
        }
    }

    @Override
    public Map<String, Object> getComponentConfiguration() {
        return null;
    }

    @Override
    public void finishedId(Object o) {

    }

    public LinkedList<Tuple> copyTuples(long n){
        if(tupleBuffer.size() < n) {
            throw new RuntimeException("Insufficient tuples in tuple buffer.");
        }

        LinkedList<Tuple> firstPeekCountTuples = new LinkedList<>();
        for(int i = 0; i < n; i++){
            firstPeekCountTuples.add(tupleBuffer.get(i));
        }

        return firstPeekCountTuples;
    }

    public void emit(List<Object> values){
        collector.emit(values); // We don't need to support anchor yet because we are not supporting messages id in spout.
    }

    public Tuple pop(){
        return tupleBuffer.pop();
    }
}
